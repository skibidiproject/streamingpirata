events {}
http {
    # -------------------------------
    # mediaprovider.fuckcopyright.net - HTTP
    # Redirect HTTP â†’ HTTPS
    server {
        listen 80;
        server_name mediaprovider.fuckcopyright.net;
        return 301 https://$host$request_uri;
    }

    # -------------------------------
    # mediaprovider.fuckcopyright.net - HTTPS
    server {
        listen 443 ssl http2;
        server_name mediaprovider.fuckcopyright.net;

        ssl_certificate     /etc/ssl/certs/cloudflare.crt;
        ssl_certificate_key /etc/ssl/private/cloudflare.key;

        # Debug header per verificare che stiamo nel server giusto
        add_header X-Server-Name "mediaprovider-https" always;
        
        # Gestisce sia /proxy/ che /proxy
        location ~ ^/proxy/?$ {
            # Debug
            add_header X-Location "proxy" always;
            
            valid_referers none blocked streaming.fuckcopyright.net;
            if ($invalid_referer) {
                return 403;
            }

            # Gestione OPTIONS per CORS
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                add_header 'Access-Control-Max-Age' 86400 always;
                return 204;
            }

            # IMPORTANTE: Rimuovi header CORS dal server upstream
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            proxy_hide_header Access-Control-Allow-Credentials;
            
            # Headers CORS
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            resolver 1.1.1.1 ipv6=off;
            if ($args ~ "url=(.+)") {
                set $target_url $1;
            }
            if ($target_url = "") {
                return 400 "Missing 'url' parameter";
            }
            
            proxy_pass $target_url;
            proxy_ssl_server_name on;
            proxy_set_header Host $proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Force correct MIME types for HLS
            location ~* \.(m3u8)$ {
                add_header Content-Type application/vnd.apple.mpegurl always;
                add_header 'Access-Control-Allow-Origin' '*' always;
            }
            location ~* \.(ts)$ {
                add_header Content-Type video/mp2t always;
                add_header 'Access-Control-Allow-Origin' '*' always;
            }
            location ~* \.(vtt)$ {
                add_header Content-Type text/vtt always;
                add_header 'Access-Control-Allow-Origin' '*' always;
            }
        }
        
        location /storage/enc.key {
            # Debug
            add_header X-Location "enc-key" always;
            
            valid_referers none blocked streaming.fuckcopyright.net;
            if ($invalid_referer) {
                return 403;
            }

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' '*' always;
                return 204;
            }
            
            resolver 8.8.8.8 ipv6=off;
            proxy_pass https://vixsrc.to/storage/enc.key;
            proxy_ssl_server_name on;
            proxy_set_header Host vixsrc.to;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            
            default_type application/octet-stream;
        }
        
        # Test endpoint
        location /test {
            add_header Content-Type text/plain always;
            add_header 'Access-Control-Allow-Origin' '*' always;
            return 200 "mediaprovider is working!";
        }
        
        # Catch-all
        location / {
            add_header Content-Type text/plain always;
            return 404 "Not found on mediaprovider HTTPS - only /proxy/ and /storage/enc.key are available";
        }
    }

    # -------------------------------
    # streaming.fuckcopyright.net
    server {
        listen 80;
        server_name streaming.fuckcopyright.net;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name streaming.fuckcopyright.net;

        ssl_certificate     /etc/ssl/certs/cloudflare.crt;
        ssl_certificate_key /etc/ssl/private/cloudflare.key;

        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # -------------------------------
    # auth.fuckcopyright.net
    server {
        listen 80;
        server_name auth.fuckcopyright.net;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name auth.fuckcopyright.net;

        ssl_certificate     /etc/ssl/certs/cloudflare.crt;
        ssl_certificate_key /etc/ssl/private/cloudflare.key;

        location / {
            proxy_pass http://localhost:3050;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # -------------------------------
    # dbmanagement.fuckcopyright.net
    server {
        listen 80;
        server_name dbmanagement.fuckcopyright.net;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name dbmanagement.fuckcopyright.net;

        ssl_certificate     /etc/ssl/certs/cloudflare.crt;
        ssl_certificate_key /etc/ssl/private/cloudflare.key;

        location / {
            proxy_pass http://localhost:5051;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # -------------------------------
    # extractor.fuckcopyright.net
    server {
        listen 80;
        server_name extractor.fuckcopyright.net;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name extractor.fuckcopyright.net;

        ssl_certificate     /etc/ssl/certs/cloudflare.crt;
        ssl_certificate_key /etc/ssl/private/cloudflare.key;

        location / {
            proxy_pass http://localhost:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # -------------------------------
    # analytics.fuckcopyright.net
    server {
        listen 80;
        server_name analytics.fuckcopyright.net;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name analytics.fuckcopyright.net;

        ssl_certificate     /etc/ssl/certs/cloudflare.crt;
        ssl_certificate_key /etc/ssl/private/cloudflare.key;

        location / {
            proxy_pass http://localhost:5050;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

    }
}
